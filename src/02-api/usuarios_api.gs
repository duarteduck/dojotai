/**
 * ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
 * ‚ïë                             SISTEMA DOJOTAI V2.0 - API DE USU√ÅRIOS                              ‚ïë
 * ‚ïë                                    Criado: 25/09/2025                                           ‚ïë
 * ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 *
 * @fileoverview API para gerenciar usu√°rios do sistema
 * @author Sistema Dojotai Team
 * @version 2.0.0
 */

/**
 * Lista todos os usu√°rios ativos do sistema
 * Refatorado para usar listActiveUsers (j√° migrado para DatabaseManager)
 * @returns {Object} Resultado com lista de usu√°rios
 */
function listUsuariosApi() {
  try {
    console.log('üìã Listando usu√°rios para sele√ß√£o...');

    // Usar fun√ß√£o j√° migrada para DatabaseManager
    const result = listActiveUsers();

    if (!result || !result.ok) {
      return {
        ok: false,
        error: result?.error || 'Nenhum usu√°rio encontrado',
        items: []
      };
    }

    // Mapear para formato da API (uid e nome)
    const usuariosList = result.users.map(user => ({
      uid: user.uid,
      nome: user.nome || `Usu√°rio ${user.uid}`
    }));

    console.log(`‚úÖ ${usuariosList.length} usu√°rios carregados`);

    return {
      ok: true,
      items: usuariosList,
      total: usuariosList.length
    };

  } catch (error) {
    console.error('‚ùå Erro ao listar usu√°rios:', error);
    Logger.error('UsuariosAPI', 'Error listing users', { error: error.message });
    return {
      ok: false,
      error: error.message || 'Erro interno do servidor',
      items: []
    };
  }
}

// ============================================================================
// FUN√á√ïES REMOVIDAS: Movidas para activities_api.gs - usuarios_api.gs:58-605
//
// Motivo: Reorganiza√ß√£o por dom√≠nio - fun√ß√µes de atividades n√£o devem estar em usuarios_api
// - listCategoriasAtividadesApi() ‚Üí activities_api.gs (linhas 10-50)
// - createActivity() ‚Üí activities_api.gs (linhas 58-241)
// - getActivityById() ‚Üí activities_api.gs (linhas 249-364)
// - updateActivity() ‚Üí activities_api.gs (linhas 372-486)
// - completeActivity() ‚Üí activities_api.gs (linhas 494-593)
//
// Todas as 5 fun√ß√µes s√£o endpoints p√∫blicos chamados via google.script.run pelo frontend
// Localiza√ß√£o nova: src/02-api/activities_api.gs
//
// Removido em: Migra√ß√£o #2 - Fase 1, Reorganiza√ß√£o de Arquivos
// Data: 02/10/2025
// ============================================================================

// REMOVIDO: listCategoriasAtividadesApi() ‚Üí Movido para activities_api.gs:10-50
// REMOVIDO: createActivity() ‚Üí Movido para activities_api.gs:58-241
// REMOVIDO: getActivityById() ‚Üí Movido para activities_api.gs:249-364
// REMOVIDO: updateActivity() ‚Üí Movido para activities_api.gs:372-486
// REMOVIDO: completeActivity() ‚Üí Movido para activities_api.gs:494-593

/**
 * Retorna o usu√°rio atual logado para filtros
 * @returns {Object} Dados do usu√°rio atual
 */
function getCurrentUserForFilter() {
  try {
    // Obter usu√°rio logado real via sess√£o
    const sessionId = PropertiesService.getScriptProperties().getProperty('currentSessionId');
    if (!sessionId) {
      console.log('‚ùå Usu√°rio n√£o autenticado - sem sess√£o ativa');
      return null;
    }

    const sessionData = validateSession(sessionId);
    if (!sessionData || !sessionData.ok || !sessionData.session) {
      console.log('‚ùå Sess√£o inv√°lida ou expirada');
      return null;
    }

    const userId = sessionData.session.user_id;

    // Buscar dados do usu√°rio
    const usuario = DatabaseManager.findById('usuarios', userId);
    if (!usuario) {
      console.log('‚ùå Usu√°rio n√£o encontrado na base de dados:', userId);
      return null;
    }

    return {
      uid: usuario.uid,
      nome: usuario.nome
    };
  } catch (error) {
    console.error('‚ùå Erro ao obter usu√°rio atual para filtro:', error);
    return null;
  }
}

/**
 * Autentica usu√°rio e cria sess√£o usando SecurityManager existente
 * @param {string} login - Login do usu√°rio
 * @param {string} password - PIN do usu√°rio
 * @returns {Object} Resultado da autentica√ß√£o
 */
async function authenticateUser(login, password) {
  try {
    console.log('üîê Autenticando usu√°rio:', login);

    // Usar SecurityManager.secureLogin existente
    const loginResult = await SecurityManager.secureLogin(login, password);

    if (!loginResult.ok) {
      return {
        success: false,
        error: loginResult.error
      };
    }

    // Criar sess√£o usando SessionManager
    const sessionResult = await createSession(loginResult.user.uid, {
      platform: 'web',
      login_method: 'pin'
    });

    console.log('üîç Resultado da cria√ß√£o de sess√£o:', sessionResult);

    if (!sessionResult || !sessionResult.ok || !sessionResult.session) {
      return {
        success: false,
        error: 'Erro ao criar sess√£o: ' + (sessionResult?.error || 'Resposta inv√°lida do SessionManager')
      };
    }

    // Salvar sessionId para uso posterior
    PropertiesService.getScriptProperties().setProperty('currentSessionId', sessionResult.session.id);
    console.log('üíæ SessionId salvo:', sessionResult.session.id);

    console.log('‚úÖ Login bem-sucedido para usu√°rio:', loginResult.user.uid);

    return {
      success: true,
      user: {
        uid: loginResult.user.uid,
        nome: loginResult.user.nome,
        login: loginResult.user.login,
        role: loginResult.user.role
      },
      session: {
        id: sessionResult.session.id,
        expires_at: sessionResult.session.expires_at
      }
    };

  } catch (error) {
    console.error('‚ùå Erro na autentica√ß√£o:', error);
    return {
      success: false,
      error: 'Erro interno do servidor: ' + error.message
    };
  }
}

/**
 * Retorna dados do usu√°rio logado atualmente (para menu din√¢mico)
 * @returns {Object} Dados do usu√°rio logado
 */
function getCurrentLoggedUser() {
  try {
    console.log('üë§ Buscando usu√°rio logado atual...');

    // M√©todo 1: Tentar via sess√£o atual armazenada
    let sessionId = PropertiesService.getScriptProperties().getProperty('currentSessionId');
    console.log('üîç SessionId recuperado das propriedades:', sessionId);

    if (sessionId) {
      const sessionData = validateSession(sessionId);
      console.log('üîç Dados da sess√£o validada:', sessionData);

      if (sessionData && sessionData.ok && sessionData.session) {
        const userId = sessionData.session.user_id;
        console.log('üîç UserId da sess√£o:', userId);

        const usuario = DatabaseManager.findById('usuarios', userId);
        if (usuario) {
          console.log('‚úÖ Usu√°rio encontrado via sess√£o:', usuario.uid, usuario.nome);
          return {
            uid: usuario.uid,
            nome: usuario.nome,
            metodo: 'sessao_ativa'
          };
        }
      }
    }

    // M√©todo 2: Tentar buscar sess√£o ativa mais recente (migrado para DatabaseManager)
    console.log('üîÑ Tentando m√©todo 2: sess√£o ativa mais recente...');
    try {
      // Buscar todas as sess√µes ativas usando DatabaseManager
      const queryResult = DatabaseManager.query('sessoes', { active: 'true' }, false);
      const sessions = Array.isArray(queryResult) ? queryResult : (queryResult?.data || []);

      if (sessions && sessions.length > 0) {
        // Ordenar por created_at (mais recente primeiro)
        const sessionsOrdenadas = sessions.sort((a, b) => {
          const dateA = new Date(a.created_at || 0);
          const dateB = new Date(b.created_at || 0);
          return dateB - dateA;
        });

        const sessionAtiva = sessionsOrdenadas[0];
        console.log('üîç Sess√£o ativa mais recente encontrada:', sessionAtiva.session_id);

        const usuario = DatabaseManager.findById('usuarios', sessionAtiva.user_id);
        if (usuario) {
          console.log('‚úÖ Usu√°rio encontrado via sess√£o ativa:', usuario.uid, usuario.nome);
          return {
            uid: usuario.uid,
            nome: usuario.nome,
            metodo: 'sessao_ativa_recente'
          };
        }
      }
    } catch (sessionError) {
      console.warn('‚ö†Ô∏è Erro ao buscar sess√µes ativas:', sessionError.message);
      Logger.error('UsuariosAPI', 'Error finding active session', { error: sessionError.message });
    }

    // M√©todo 3: Log para debug - N√ÉO retornar usu√°rio aleat√≥rio
    console.log('‚ùå Nenhum usu√°rio logado encontrado pelos m√©todos dispon√≠veis');
    console.log('üí° Isso pode indicar que o usu√°rio precisa fazer login novamente');

    return null;

  } catch (error) {
    console.error('‚ùå Erro ao obter usu√°rio logado:', error);
    return null;
  }
}

/**
 * Retorna o primeiro usu√°rio da tabela para desenvolvimento
 * @returns {Object} Dados do usu√°rio para desenvolvimento
 */
function getFirstUserForDev() {
  try {
    const usuarios = DatabaseManager.query('usuarios', {}, false);
    if (!usuarios || usuarios.length === 0) {
      return null;
    }

    const firstUser = usuarios[0];
    return {
      uid: firstUser.uid,
      nome: firstUser.nome,
      login: firstUser.login
    };
  } catch (error) {
    console.error('‚ùå Erro ao obter primeiro usu√°rio:', error);
    return null;
  }
}