/**
 * ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
 * ‚ïë                             SISTEMA DOJOTAI V2.0 - API DE USU√ÅRIOS                              ‚ïë
 * ‚ïë                                    Criado: 25/09/2025                                           ‚ïë
 * ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 *
 * @fileoverview API para gerenciar usu√°rios do sistema
 * @author Sistema Dojotai Team
 * @version 2.0.0
 */

/**
 * Lista todos os usu√°rios ativos do sistema
 * Refatorado para usar listActiveUsers (j√° migrado para DatabaseManager)
 * @returns {Object} Resultado com lista de usu√°rios
 */
function listUsuariosApi() {
  try {
    console.log('üìã Listando usu√°rios para sele√ß√£o...');

    // Usar fun√ß√£o j√° migrada para DatabaseManager
    const result = listActiveUsers();

    if (!result || !result.ok) {
      return {
        ok: false,
        error: result?.error || 'Nenhum usu√°rio encontrado',
        items: []
      };
    }

    // Mapear para formato da API (uid e nome)
    const usuariosList = result.users.map(user => ({
      uid: user.uid,
      nome: user.nome || `Usu√°rio ${user.uid}`
    }));

    console.log(`‚úÖ ${usuariosList.length} usu√°rios carregados`);

    return {
      ok: true,
      items: usuariosList,
      total: usuariosList.length
    };

  } catch (error) {
    console.error('‚ùå Erro ao listar usu√°rios:', error);
    Logger.error('UsuariosAPI', 'Error listing users', { error: error.message });
    return {
      ok: false,
      error: error.message || 'Erro interno do servidor',
      items: []
    };
  }
}

/**
 * Lista categorias de atividades
 * Refatorado para usar _listCategoriasAtividadesCore (j√° migrado para DatabaseManager)
 * @returns {Object} Resultado com lista de categorias
 */
function listCategoriasAtividadesApi() {
  try {
    console.log('üìã Listando categorias de atividades...');

    // Usar fun√ß√£o j√° migrada para DatabaseManager
    const result = _listCategoriasAtividadesCore();

    if (!result || !result.ok) {
      return {
        ok: false,
        error: result?.error || 'Erro ao buscar categorias',
        items: []
      };
    }

    // Mapear para formato simplificado da API (apenas id e nome)
    const categoriasList = result.items.map(cat => ({
      id: cat.id,
      nome: cat.nome || `Categoria ${cat.id}`
    }));

    console.log(`‚úÖ ${categoriasList.length} categorias carregadas`);

    return {
      ok: true,
      items: categoriasList,
      total: categoriasList.length
    };

  } catch (error) {
    console.error('‚ùå Erro ao listar categorias:', error);
    Logger.error('UsuariosAPI', 'Error listing categories', { error: error.message });
    return {
      ok: false,
      error: error.message || 'Erro interno do servidor',
      items: []
    };
  }
}

/**
 * Cria uma nova atividade
 * @param {Object} activityData - Dados da atividade
 * @param {string} creatorUid - UID do usu√°rio criador
 * @returns {Object} Resultado da opera√ß√£o
 */
async function createActivity(activityData, creatorUid) {
  try {
    console.log('üìù Criando nova atividade - dados recebidos:', activityData);

    // Remover qualquer campo 'id' que possa estar vindo do frontend
    if (activityData.hasOwnProperty('id')) {
      delete activityData.id;
      console.log('üßπ Campo "id" removido dos dados de entrada');
    }

    // Valida√ß√£o dos dados obrigat√≥rios
    if (!activityData.titulo) {
      return {
        ok: false,
        error: 'T√≠tulo da atividade √© obrigat√≥rio'
      };
    }

    if (!activityData.data) {
      return {
        ok: false,
        error: 'Data da atividade √© obrigat√≥ria'
      };
    }

    // Validar formato da data - deve ter pelo menos data
    if (activityData.data.length < 10 || !activityData.data.includes('-')) {
      return {
        ok: false,
        error: 'Formato da data inv√°lido. Esperado: YYYY-MM-DD ou YYYY-MM-DDTHH:MM'
      };
    }

    // Preparar dados para inser√ß√£o (IMPORTANTE: sem campo ID - √© gerado automaticamente)
    const newActivity = {};

    // Adicionar apenas campos n√£o-generated do dicion√°rio
    newActivity.titulo = activityData.titulo;
    newActivity.descricao = activityData.descricao || '';

    // Tratar data - converter para formato DATETIME (yyyy-MM-dd HH:mm:ss)
    let dataFormatted = activityData.data;

    // Converter de ISO (2025-09-25T17:36) para formato do banco (2025-09-25 17:36:00)
    if (dataFormatted.includes('T')) {
      const [datePart, timePart] = dataFormatted.split('T');
      if (timePart && timePart.trim() !== '') {
        // Tem hor√°rio: adicionar :00 se necess√°rio
        const timeFormatted = timePart.includes(':') ? timePart : timePart + ':00';
        dataFormatted = `${datePart} ${timeFormatted}:00`;
      } else {
        // S√≥ tem data (ex: "2025-09-25T"): adicionar hor√°rio padr√£o
        dataFormatted = `${datePart} 00:00:00`;
      }
    } else {
      // S√≥ tem data: adicionar hor√°rio padr√£o
      dataFormatted = `${dataFormatted} 00:00:00`;
    }

    newActivity.data = dataFormatted;
    console.log('üìÖ Data formatada para DATETIME:', dataFormatted);
    newActivity.status = 'Pendente'; // Status padr√£o sempre Pendente

    // Categorias (m√∫ltiplas sele√ß√µes)
    if (activityData.categorias && activityData.categorias.length > 0) {
      // Converter array para string separada por v√≠rgula
      let categoriasIds;
      if (Array.isArray(activityData.categorias)) {
        // Garantir que cada elemento seja uma string limpa
        const cleanedCategories = activityData.categorias
          .map(cat => cat ? cat.toString().trim() : '')
          .filter(cat => cat.length > 0);
        categoriasIds = cleanedCategories.join(',');
      } else {
        categoriasIds = activityData.categorias.toString().trim();
      }

      newActivity.categorias_ids = categoriasIds;
    }

    // Respons√°vel
    if (activityData.atribuido_uid) {
      newActivity.atribuido_uid = activityData.atribuido_uid;
    }

    // Tags opcionais
    if (activityData.tags) {
      newActivity.tags = activityData.tags;
    }

    // Campos de auditoria
    // TEMPOR√ÅRIO: usar UID fixo at√© corrigir sistema de login
    const cleanCreatorUid = creatorUid && creatorUid.startsWith('U') ? creatorUid : 'U001';
    newActivity.criado_por = cleanCreatorUid;
    // Usar formatTimestamp do DatabaseManager para timezone correto
    newActivity.criado_em = Utilities.formatDate(new Date(), APP_CONFIG.TZ, 'yyyy-MM-dd HH:mm:ss');
    newActivity.deleted = ''; // Campo padr√£o para soft delete

    console.log('üë§ UID do criador usado:', cleanCreatorUid);

    console.log('üìã Dados preparados para inser√ß√£o (sem ID):', newActivity);
    console.log('üîç Campos enviados:', Object.keys(newActivity));

    // Verifica√ß√£o final - garantir que n√£o h√° campo 'id'
    if (newActivity.hasOwnProperty('id')) {
      console.error('üö® ERRO: Campo "id" ainda presente nos dados!');
      delete newActivity.id;
    }

    // Usar DatabaseManager conforme orienta√ß√£o di√°ria
    console.log('üìù Usando DatabaseManager.insert para atividades...');
    console.log('üì§ Dados finais enviados ao DatabaseManager:', JSON.stringify(newActivity, null, 2));
    console.log('üîç Verifica√ß√£o campo ID:', newActivity.id || 'CAMPO ID N√ÉO EST√Å PRESENTE');
    console.log('üîç Todos os campos:', Object.keys(newActivity));


    try {
      const result = await DatabaseManager.insert('atividades', newActivity);
      console.log('üìã Resultado DatabaseManager.insert:', result);

      // Se deu erro, vamos interceptar para mostrar mais detalhes
      if (!result.success && result.error && result.error.includes('id:')) {
        console.error('üö® ERRO ESPEC√çFICO DO ID:');
        console.error('üîç ID que causou erro:', newActivity.id || 'undefined');
        console.error('üîç Tipo do ID:', typeof newActivity.id);
        console.error('üîç Propriedades do objeto:', Object.getOwnPropertyNames(newActivity));
      }

      if (result && result.success) {
        console.log('‚úÖ Atividade criada com sucesso via DatabaseManager');
        return {
          ok: true,
          message: result.message || 'Atividade criada com sucesso',
          id: result.id,
          data: result.data
        };
      } else {
        console.error('‚ùå DatabaseManager.insert falhou:', result);

        // Log estruturado conforme orienta√ß√£o (se Logger estiver dispon√≠vel)
        if (typeof Logger !== 'undefined') {
          Logger.error('CreateActivity', 'Falha ao inserir atividade no banco', {
            activityData: newActivity,
            result: result
          });
        }

        return {
          ok: false,
          error: result?.error || result?.message || 'Erro ao criar atividade no banco de dados'
        };
      }
    } catch (dbError) {
      console.error('‚ùå Exception no DatabaseManager:', dbError);
      console.error('üîç Stack trace:', dbError.stack);
      return {
        ok: false,
        error: 'Exception no banco de dados: ' + dbError.message
      };
    }

  } catch (error) {
    console.error('‚ùå Erro ao criar atividade:', error);
    return {
      ok: false,
      error: error.message || 'Erro interno do servidor'
    };
  }
}

/**
 * Busca uma atividade espec√≠fica pelo ID
 * @param {string} activityId - ID da atividade
 * @returns {Object} Resultado com dados da atividade
 */
function getActivityById(activityId, retryCount = 0) {
  try {
    console.log(`üîç Buscando atividade ID: ${activityId} (tentativa ${retryCount + 1})`);

    if (!activityId) {
      console.error('‚ùå ID da atividade n√£o fornecido');
      return {
        ok: false,
        error: 'ID da atividade √© obrigat√≥rio'
      };
    }

    // Verificar se DatabaseManager est√° dispon√≠vel
    if (typeof DatabaseManager === 'undefined') {
      console.error('‚ùå DatabaseManager n√£o est√° dispon√≠vel');
      return {
        ok: false,
        error: 'Sistema de banco de dados n√£o dispon√≠vel'
      };
    }

    // Se √© retry, for√ßar limpeza de cache primeiro
    if (retryCount > 0) {
      console.log(`üîÑ Retry ${retryCount}: invalidando cache antes da busca...`);
      try {
        if (typeof CacheManager !== 'undefined') {
          CacheManager.invalidate('atividades');
          // Pequena pausa para garantir que cache foi limpo
          Utilities.sleep(100);
        }
      } catch (cacheError) {
        console.warn('‚ö†Ô∏è Erro ao invalidar cache no retry:', cacheError.message);
      }
    }

    // Buscar atividade usando DatabaseManager
    console.log('üîç Chamando DatabaseManager.findById...');
    const atividade = DatabaseManager.findById('atividades', activityId);
    console.log('üìã Resultado do findById:', atividade);

    if (!atividade) {
      // Se n√£o encontrou e ainda n√£o tentou retry, tentar novamente
      if (retryCount < 2) {
        console.log(`‚è≥ Atividade n√£o encontrada, tentando novamente em 200ms... (retry ${retryCount + 1})`);
        Utilities.sleep(200);
        return getActivityById(activityId, retryCount + 1);
      }

      console.error('‚ùå Atividade n√£o encontrada no banco ap√≥s todas as tentativas:', activityId);
      return {
        ok: false,
        error: `Atividade ${activityId} n√£o encontrada`
      };
    }

    // Limpar e serializar dados para evitar problemas de comunica√ß√£o
    const cleanActivity = {
      id: atividade.id || '',
      titulo: atividade.titulo || '',
      descricao: atividade.descricao || '',
      data: atividade.data ? atividade.data.toString() : '',
      status: atividade.status || 'Pendente',
      atribuido_uid: atividade.atribuido_uid || '',
      categorias_ids: atividade.categorias_ids || '',
      tags: atividade.tags || '',
      criado_por: atividade.criado_por || '',
      criado_em: atividade.criado_em ? atividade.criado_em.toString() : '',
      atualizado_em: atividade.atualizado_em ? atividade.atualizado_em.toString() : ''
    };

    console.log('‚úÖ Atividade encontrada e limpa:', {
      id: cleanActivity.id,
      titulo: cleanActivity.titulo,
      data: cleanActivity.data,
      status: cleanActivity.status
    });

    console.log('üì§ Retornando atividade serializada:', JSON.stringify(cleanActivity));

    return {
      ok: true,
      activity: cleanActivity
    };

  } catch (error) {
    console.error('‚ùå Erro ao buscar atividade:', error);
    console.error('‚ùå Stack trace:', error.stack);

    // Se erro e ainda n√£o tentou retry, tentar novamente
    if (retryCount < 2) {
      console.log(`‚è≥ Erro na busca, tentando novamente em 300ms... (retry ${retryCount + 1})`);
      Utilities.sleep(300);
      return getActivityById(activityId, retryCount + 1);
    }

    return {
      ok: false,
      error: error.message || 'Erro interno do servidor'
    };
  }
}

/**
 * Atualiza uma atividade existente
 * @param {Object} activityData - Dados da atividade para atualizar
 * @returns {Object} Resultado da opera√ß√£o
 */
async function updateActivity(activityData) {
  try {
    console.log('üîÑ Atualizando atividade - dados recebidos:', activityData);

    if (!activityData || !activityData.id) {
      return {
        ok: false,
        error: 'ID da atividade √© obrigat√≥rio para atualiza√ß√£o'
      };
    }

    const activityId = activityData.id;

    // Valida√ß√£o dos dados obrigat√≥rios
    if (!activityData.titulo) {
      return {
        ok: false,
        error: 'T√≠tulo da atividade √© obrigat√≥rio'
      };
    }

    if (!activityData.data) {
      return {
        ok: false,
        error: 'Data da atividade √© obrigat√≥ria'
      };
    }

    // Preparar dados para atualiza√ß√£o (remover ID dos dados)
    const updateData = { ...activityData };
    delete updateData.id; // Remover ID dos dados de update

    // Tratar data - converter para formato DATETIME (yyyy-MM-dd HH:mm:ss)
    let dataFormatted = updateData.data;
    if (dataFormatted.includes('T')) {
      const [datePart, timePart] = dataFormatted.split('T');
      if (timePart && timePart.trim() !== '') {
        const timeFormatted = timePart.includes(':') ? timePart : timePart + ':00';
        dataFormatted = `${datePart} ${timeFormatted}:00`;
      } else {
        dataFormatted = `${datePart} 00:00:00`;
      }
    } else {
      dataFormatted = `${dataFormatted} 00:00:00`;
    }
    updateData.data = dataFormatted;

    // Processar categorias (m√∫ltiplas sele√ß√µes)
    if (updateData.categorias && updateData.categorias.length > 0) {
      let categoriasIds;
      if (Array.isArray(updateData.categorias)) {
        const cleanedCategories = updateData.categorias
          .map(cat => cat ? cat.toString().trim() : '')
          .filter(cat => cat.length > 0);
        categoriasIds = cleanedCategories.join(',');
      } else {
        categoriasIds = updateData.categorias.toString().trim();
      }
      updateData.categorias_ids = categoriasIds;
      delete updateData.categorias; // Remover campo tempor√°rio
    }

    // Campos de auditoria para update
    updateData.atualizado_em = Utilities.formatDate(new Date(), APP_CONFIG.TZ, 'yyyy-MM-dd HH:mm:ss');

    console.log('üìù Dados preparados para atualiza√ß√£o:', updateData);

    // Usar DatabaseManager para atualizar
    console.log('üîÑ Chamando DatabaseManager.update...');
    const result = await DatabaseManager.update('atividades', activityId, updateData);
    console.log('üìã Resultado DatabaseManager.update:', result);

    if (result && result.success === true) {
      console.log('‚úÖ Atividade atualizada com sucesso no banco');

      // For√ßar limpeza de cache para garantir dados atualizados
      try {
        if (typeof CacheManager !== 'undefined') {
          CacheManager.invalidate('atividades');
          console.log('üóëÔ∏è Cache de atividades invalidado ap√≥s update');
        }
      } catch (cacheError) {
        console.warn('‚ö†Ô∏è Erro ao invalidar cache:', cacheError.message);
      }

      return {
        ok: true,
        message: 'Atividade atualizada com sucesso'
      };
    } else {
      console.error('‚ùå DatabaseManager.update falhou:', result);

      // Log estruturado se Logger estiver dispon√≠vel
      if (typeof Logger !== 'undefined') {
        Logger.error('UpdateActivity', 'Falha ao atualizar atividade no banco', {
          activityId: activityId,
          updateData: updateData,
          result: result
        });
      }

      return {
        ok: false,
        error: result?.error || 'Erro ao atualizar atividade no banco de dados'
      };
    }

  } catch (error) {
    console.error('‚ùå Erro ao atualizar atividade:', error);
    console.error('‚ùå Stack trace:', error.stack);
    return {
      ok: false,
      error: error.message || 'Erro interno do servidor'
    };
  }
}

/**
 * Marca uma atividade como conclu√≠da
 * @param {string} activityId - ID da atividade
 * @returns {Object} Resultado da opera√ß√£o
 */
async function completeActivity(activityId) {
  try {
    console.log('‚úÖ Marcando atividade como conclu√≠da:', activityId);

    if (!activityId) {
      throw new Error('ID da atividade √© obrigat√≥rio');
    }

    // Obter usu√°rio logado real via sess√£o
    const sessionId = PropertiesService.getScriptProperties().getProperty('currentSessionId');
    console.log('üîç SessionId recuperado:', sessionId);

    if (!sessionId) {
      throw new Error('Usu√°rio n√£o autenticado - sem sess√£o ativa');
    }

    const sessionData = validateSession(sessionId);
    console.log('üîç Valida√ß√£o da sess√£o:', sessionData);

    if (!sessionData || !sessionData.ok || !sessionData.session) {
      throw new Error('Sess√£o inv√°lida ou expirada');
    }

    const userId = sessionData.session.user_id;

    // Buscar dados do usu√°rio
    const usuario = DatabaseManager.findById('usuarios', userId);
    if (!usuario) {
      throw new Error('Usu√°rio n√£o encontrado na base de dados');
    }

    console.log('üë§ Usu√°rio logado:', usuario.uid);

    // Dados para atualiza√ß√£o - apenas campos necess√°rios
    const agora = Utilities.formatDate(new Date(), APP_CONFIG.TZ, 'yyyy-MM-dd HH:mm:ss');
    const updateData = {
      status: 'Conclu√≠da',
      atualizado_uid: usuario.uid,
      atualizado_em: agora
    };

    console.log('üìù Dados de atualiza√ß√£o:', updateData);

    // Primeiro verificar se a atividade existe
    console.log('üîç Verificando se atividade existe:', activityId);
    const existingActivity = DatabaseManager.findById('atividades', activityId);
    console.log('üîç Resultado da verifica√ß√£o:', existingActivity);

    if (!existingActivity) {
      console.error('‚ùå Atividade n√£o encontrada:', activityId);
      return {
        ok: false,
        error: `Atividade ${activityId} n√£o encontrada`
      };
    }

    // Usar DatabaseManager para atualizar
    const result = await DatabaseManager.update('atividades', activityId, updateData);

    if (result && result.success) {
      console.log('‚úÖ Status da atividade atualizado com sucesso');

      // For√ßar limpeza de cache
      try {
        if (typeof CacheManager !== 'undefined') {
          CacheManager.invalidate('atividades');
          console.log('üóëÔ∏è Cache de atividades invalidado ap√≥s marcar como conclu√≠da');
        }
      } catch (cacheError) {
        console.warn('‚ö†Ô∏è Erro ao invalidar cache:', cacheError.message);
      }

      return {
        ok: true,
        message: 'Atividade marcada como conclu√≠da com sucesso'
      };
    } else {
      console.error('‚ùå DatabaseManager.update falhou:', result);

      return {
        ok: false,
        error: result?.error || 'Erro ao marcar atividade como conclu√≠da'
      };
    }

  } catch (error) {
    console.error('‚ùå Erro ao marcar atividade como conclu√≠da:', error);
    console.error('‚ùå Stack trace:', error.stack);
    return {
      ok: false,
      error: error.message || 'Erro interno do servidor'
    };
  }
}

/**
 * Retorna o usu√°rio atual logado para filtros
 * @returns {Object} Dados do usu√°rio atual
 */
function getCurrentUserForFilter() {
  try {
    // Obter usu√°rio logado real via sess√£o
    const sessionId = PropertiesService.getScriptProperties().getProperty('currentSessionId');
    if (!sessionId) {
      console.log('‚ùå Usu√°rio n√£o autenticado - sem sess√£o ativa');
      return null;
    }

    const sessionData = validateSession(sessionId);
    if (!sessionData || !sessionData.ok || !sessionData.session) {
      console.log('‚ùå Sess√£o inv√°lida ou expirada');
      return null;
    }

    const userId = sessionData.session.user_id;

    // Buscar dados do usu√°rio
    const usuario = DatabaseManager.findById('usuarios', userId);
    if (!usuario) {
      console.log('‚ùå Usu√°rio n√£o encontrado na base de dados:', userId);
      return null;
    }

    return {
      uid: usuario.uid,
      nome: usuario.nome
    };
  } catch (error) {
    console.error('‚ùå Erro ao obter usu√°rio atual para filtro:', error);
    return null;
  }
}

/**
 * Autentica usu√°rio e cria sess√£o usando SecurityManager existente
 * @param {string} login - Login do usu√°rio
 * @param {string} password - PIN do usu√°rio
 * @returns {Object} Resultado da autentica√ß√£o
 */
async function authenticateUser(login, password) {
  try {
    console.log('üîê Autenticando usu√°rio:', login);

    // Usar SecurityManager.secureLogin existente
    const loginResult = await SecurityManager.secureLogin(login, password);

    if (!loginResult.ok) {
      return {
        success: false,
        error: loginResult.error
      };
    }

    // Criar sess√£o usando SessionManager
    const sessionResult = await createSession(loginResult.user.uid, {
      platform: 'web',
      login_method: 'pin'
    });

    console.log('üîç Resultado da cria√ß√£o de sess√£o:', sessionResult);

    if (!sessionResult || !sessionResult.ok || !sessionResult.session) {
      return {
        success: false,
        error: 'Erro ao criar sess√£o: ' + (sessionResult?.error || 'Resposta inv√°lida do SessionManager')
      };
    }

    // Salvar sessionId para uso posterior
    PropertiesService.getScriptProperties().setProperty('currentSessionId', sessionResult.session.id);
    console.log('üíæ SessionId salvo:', sessionResult.session.id);

    console.log('‚úÖ Login bem-sucedido para usu√°rio:', loginResult.user.uid);

    return {
      success: true,
      user: {
        uid: loginResult.user.uid,
        nome: loginResult.user.nome,
        login: loginResult.user.login,
        role: loginResult.user.role
      },
      session: {
        id: sessionResult.session.id,
        expires_at: sessionResult.session.expires_at
      }
    };

  } catch (error) {
    console.error('‚ùå Erro na autentica√ß√£o:', error);
    return {
      success: false,
      error: 'Erro interno do servidor: ' + error.message
    };
  }
}

/**
 * Retorna dados do usu√°rio logado atualmente (para menu din√¢mico)
 * @returns {Object} Dados do usu√°rio logado
 */
function getCurrentLoggedUser() {
  try {
    console.log('üë§ Buscando usu√°rio logado atual...');

    // M√©todo 1: Tentar via sess√£o atual armazenada
    let sessionId = PropertiesService.getScriptProperties().getProperty('currentSessionId');
    console.log('üîç SessionId recuperado das propriedades:', sessionId);

    if (sessionId) {
      const sessionData = validateSession(sessionId);
      console.log('üîç Dados da sess√£o validada:', sessionData);

      if (sessionData && sessionData.ok && sessionData.session) {
        const userId = sessionData.session.user_id;
        console.log('üîç UserId da sess√£o:', userId);

        const usuario = DatabaseManager.findById('usuarios', userId);
        if (usuario) {
          console.log('‚úÖ Usu√°rio encontrado via sess√£o:', usuario.uid, usuario.nome);
          return {
            uid: usuario.uid,
            nome: usuario.nome,
            metodo: 'sessao_ativa'
          };
        }
      }
    }

    // M√©todo 2: Tentar buscar sess√£o ativa mais recente
    console.log('üîÑ Tentando m√©todo 2: sess√£o ativa mais recente...');
    try {
      const sessionsData = readTableByNome_('sessoes');
      if (sessionsData && sessionsData.values && sessionsData.values.length > 1) {
        const headers = sessionsData.values[0];
        const rows = sessionsData.values.slice(1);

        // Buscar sess√µes ativas ordenadas por data
        const sessionsAtivas = rows
          .map(row => {
            const session = {};
            headers.forEach((header, index) => {
              session[header] = row[index];
            });
            return session;
          })
          .filter(s => s.active === 'true' || s.active === true)
          .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

        if (sessionsAtivas.length > 0) {
          const sessionAtiva = sessionsAtivas[0];
          console.log('üîç Sess√£o ativa mais recente encontrada:', sessionAtiva.session_id);

          const usuario = DatabaseManager.findById('usuarios', sessionAtiva.user_id);
          if (usuario) {
            console.log('‚úÖ Usu√°rio encontrado via sess√£o ativa:', usuario.uid, usuario.nome);
            return {
              uid: usuario.uid,
              nome: usuario.nome,
              metodo: 'sessao_ativa_recente'
            };
          }
        }
      }
    } catch (sessionError) {
      console.warn('‚ö†Ô∏è Erro ao buscar sess√µes ativas:', sessionError.message);
    }

    // M√©todo 3: Log para debug - N√ÉO retornar usu√°rio aleat√≥rio
    console.log('‚ùå Nenhum usu√°rio logado encontrado pelos m√©todos dispon√≠veis');
    console.log('üí° Isso pode indicar que o usu√°rio precisa fazer login novamente');

    return null;

  } catch (error) {
    console.error('‚ùå Erro ao obter usu√°rio logado:', error);
    return null;
  }
}

/**
 * Retorna o primeiro usu√°rio da tabela para desenvolvimento
 * @returns {Object} Dados do usu√°rio para desenvolvimento
 */
function getFirstUserForDev() {
  try {
    const usuarios = DatabaseManager.query('usuarios', {}, false);
    if (!usuarios || usuarios.length === 0) {
      return null;
    }

    const firstUser = usuarios[0];
    return {
      uid: firstUser.uid,
      nome: firstUser.nome,
      login: firstUser.login
    };
  } catch (error) {
    console.error('‚ùå Erro ao obter primeiro usu√°rio:', error);
    return null;
  }
}