/** =========================================================
 *  activities_api.gs ‚Äî Endpoints p√∫blicos de atividades
 *  Fun√ß√µes expostas via google.script.run para o frontend
 * ========================================================= */

/**
 * Lista categorias de atividades (endpoint p√∫blico)
 * @param {string} sessionId - ID da sess√£o do usu√°rio
 * @returns {Object} Resultado com lista de categorias
 */
async function listCategoriasAtividadesApi(sessionId) {
  try {
    // Validar sess√£o (helper centralizado)
    const auth = await requireSession(sessionId, 'ActivitiesAPI');
    if (!auth.ok) return auth;

    console.log('üìã Listando categorias de atividades...');

    // Usar fun√ß√£o j√° migrada para DatabaseManager
    const result = _listCategoriasAtividadesCore();

    if (!result || !result.ok) {
      return {
        ok: false,
        error: result?.error || 'Erro ao buscar categorias',
        items: []
      };
    }

    // Mapear para formato da API (id, nome, icone)
    const categoriasList = result.items.map(cat => ({
      id: cat.id,
      nome: cat.nome || `Categoria ${cat.id}`,
      icone: cat.icone || 'üìã'
    }));

    console.log(`‚úÖ ${categoriasList.length} categorias carregadas`);

    return {
      ok: true,
      items: categoriasList,
      total: categoriasList.length
    };

  } catch (error) {
    console.error('‚ùå Erro ao listar categorias:', error);
    Logger.error('ActivitiesAPI', 'Error listing categories', { error: error.message });
    return {
      ok: false,
      error: error.message || 'Erro interno do servidor',
      items: []
    };
  }
}

/**
 * Cria uma nova atividade
 * @param {string} sessionId - ID da sess√£o do usu√°rio
 * @param {Object} activityData - Dados da atividade
 * @param {string} creatorUid - UID do usu√°rio criador
 * @returns {Object} Resultado da opera√ß√£o
 */
async function createActivity(sessionId, activityData, creatorUid) {
  try {
    console.log('üìù Criando nova atividade - sessionId:', sessionId ? '‚úì' : '‚úó', 'dados:', activityData);

    // Validar sess√£o (helper centralizado)
    const auth = await requireSession(sessionId, 'ActivitiesAPI');
    if (!auth.ok) return auth;

    // Remover qualquer campo 'id' que possa estar vindo do frontend
    if (activityData.hasOwnProperty('id')) {
      delete activityData.id;
      console.log('üßπ Campo "id" removido dos dados de entrada');
    }

    // Valida√ß√£o dos dados obrigat√≥rios
    if (!activityData.titulo) {
      return {
        ok: false,
        error: 'T√≠tulo da atividade √© obrigat√≥rio'
      };
    }

    if (!activityData.data) {
      return {
        ok: false,
        error: 'Data da atividade √© obrigat√≥ria'
      };
    }

    // Validar formato da data - deve ter pelo menos data
    if (activityData.data.length < 10 || !activityData.data.includes('-')) {
      return {
        ok: false,
        error: 'Formato da data inv√°lido. Esperado: YYYY-MM-DD ou YYYY-MM-DDTHH:MM'
      };
    }

    // Preparar dados para inser√ß√£o (IMPORTANTE: sem campo ID - √© gerado automaticamente)
    const newActivity = {};

    // Adicionar apenas campos n√£o-generated do dicion√°rio
    newActivity.titulo = activityData.titulo;
    newActivity.descricao = activityData.descricao || '';

    // Tratar data - converter para formato DATETIME (yyyy-MM-dd HH:mm:ss)
    let dataFormatted = activityData.data;

    // Converter de ISO (2025-09-25T17:36) para formato do banco (2025-09-25 17:36:00)
    if (dataFormatted.includes('T')) {
      const [datePart, timePart] = dataFormatted.split('T');
      if (timePart && timePart.trim() !== '') {
        // Tem hor√°rio: adicionar :00 se necess√°rio
        const timeFormatted = timePart.includes(':') ? timePart : timePart + ':00';
        dataFormatted = `${datePart} ${timeFormatted}:00`;
      } else {
        // S√≥ tem data (ex: "2025-09-25T"): adicionar hor√°rio padr√£o
        dataFormatted = `${datePart} 00:00:00`;
      }
    } else {
      // S√≥ tem data: adicionar hor√°rio padr√£o
      dataFormatted = `${dataFormatted} 00:00:00`;
    }

    newActivity.data = dataFormatted;
    console.log('üìÖ Data formatada para DATETIME:', dataFormatted);
    newActivity.status = 'Pendente'; // Status padr√£o sempre Pendente

    // Categorias (m√∫ltiplas sele√ß√µes)
    if (activityData.categorias && activityData.categorias.length > 0) {
      // Converter array para string separada por v√≠rgula
      let categoriasIds;
      if (Array.isArray(activityData.categorias)) {
        // Garantir que cada elemento seja uma string limpa
        const cleanedCategories = activityData.categorias
          .map(cat => cat ? cat.toString().trim() : '')
          .filter(cat => cat.length > 0);
        categoriasIds = cleanedCategories.join(',');
      } else {
        categoriasIds = activityData.categorias.toString().trim();
      }

      newActivity.categorias_ids = categoriasIds;
    }

    // Respons√°vel
    if (activityData.atribuido_uid) {
      newActivity.atribuido_uid = activityData.atribuido_uid;
    }

    // Tags opcionais
    if (activityData.tags) {
      newActivity.tags = activityData.tags;
    }

    // Campos de auditoria
    // TEMPOR√ÅRIO: usar UID fixo at√© corrigir sistema de login
    const cleanCreatorUid = creatorUid && creatorUid.startsWith('U') ? creatorUid : 'U001';
    newActivity.criado_por = cleanCreatorUid;
    // Usar formatTimestamp do DatabaseManager para timezone correto
    newActivity.criado_em = Utilities.formatDate(new Date(), APP_CONFIG.TZ, 'yyyy-MM-dd HH:mm:ss');
    newActivity.deleted = ''; // Campo padr√£o para soft delete

    console.log('üë§ UID do criador usado:', cleanCreatorUid);

    console.log('üìã Dados preparados para inser√ß√£o (sem ID):', newActivity);
    console.log('üîç Campos enviados:', Object.keys(newActivity));

    // Verifica√ß√£o final - garantir que n√£o h√° campo 'id'
    if (newActivity.hasOwnProperty('id')) {
      console.error('üö® ERRO: Campo "id" ainda presente nos dados!');
      delete newActivity.id;
    }

    // Usar DatabaseManager conforme orienta√ß√£o di√°ria
    console.log('üìù Usando DatabaseManager.insert para atividades...');
    console.log('üì§ Dados finais enviados ao DatabaseManager:', JSON.stringify(newActivity, null, 2));
    console.log('üîç Verifica√ß√£o campo ID:', newActivity.id || 'CAMPO ID N√ÉO EST√Å PRESENTE');
    console.log('üîç Todos os campos:', Object.keys(newActivity));


    try {
      const result = await DatabaseManager.insert('atividades', newActivity);
      console.log('üìã Resultado DatabaseManager.insert:', result);

      // Se deu erro, vamos interceptar para mostrar mais detalhes
      if (!result.success && result.error && result.error.includes('id:')) {
        console.error('üö® ERRO ESPEC√çFICO DO ID:');
        console.error('üîç ID que causou erro:', newActivity.id || 'undefined');
        console.error('üîç Tipo do ID:', typeof newActivity.id);
        console.error('üîç Propriedades do objeto:', Object.getOwnPropertyNames(newActivity));
      }

      if (result && result.success) {
        console.log('‚úÖ Atividade criada com sucesso via DatabaseManager');
        return {
          ok: true,
          message: result.message || 'Atividade criada com sucesso',
          id: result.id,
          data: result.data
        };
      } else {
        console.error('‚ùå DatabaseManager.insert falhou:', result);

        // Log estruturado conforme orienta√ß√£o (se Logger estiver dispon√≠vel)
        if (typeof Logger !== 'undefined') {
          Logger.error('CreateActivity', 'Falha ao inserir atividade no banco', {
            activityData: newActivity,
            result: result
          });
        }

        return {
          ok: false,
          error: result?.error || result?.message || 'Erro ao criar atividade no banco de dados'
        };
      }
    } catch (dbError) {
      console.error('‚ùå Exception no DatabaseManager:', dbError);
      console.error('üîç Stack trace:', dbError.stack);
      return {
        ok: false,
        error: 'Exception no banco de dados: ' + dbError.message
      };
    }

  } catch (error) {
    console.error('‚ùå Erro ao criar atividade:', error);
    return {
      ok: false,
      error: error.message || 'Erro interno do servidor'
    };
  }
}

/**
 * Busca uma atividade espec√≠fica pelo ID
 * @param {string} sessionId - ID da sess√£o do usu√°rio
 * @param {string} activityId - ID da atividade
 * @param {number} retryCount - Contador de tentativas
 * @returns {Object} Resultado com dados da atividade
 */
async function getActivityById(sessionId, activityId, retryCount = 0) {
  try {
    console.log(`üîç Buscando atividade - sessionId: ${sessionId ? '‚úì' : '‚úó'}, ID: ${activityId} (tentativa ${retryCount + 1})`);

    // Validar sess√£o (helper centralizado)
    const auth = await requireSession(sessionId, 'ActivitiesAPI');
    if (!auth.ok) return auth;

    if (!activityId) {
      console.error('‚ùå ID da atividade n√£o fornecido');
      return {
        ok: false,
        error: 'ID da atividade √© obrigat√≥rio'
      };
    }

    // Verificar se DatabaseManager est√° dispon√≠vel
    if (typeof DatabaseManager === 'undefined') {
      console.error('‚ùå DatabaseManager n√£o est√° dispon√≠vel');
      return {
        ok: false,
        error: 'Sistema de banco de dados n√£o dispon√≠vel'
      };
    }

    // Se √© retry, for√ßar limpeza de cache primeiro
    if (retryCount > 0) {
      console.log(`üîÑ Retry ${retryCount}: invalidando cache antes da busca...`);
      try {
        if (typeof CacheManager !== 'undefined') {
          CacheManager.invalidate('atividades');
          // Pequena pausa para garantir que cache foi limpo
          Utilities.sleep(100);
        }
      } catch (cacheError) {
        console.warn('‚ö†Ô∏è Erro ao invalidar cache no retry:', cacheError.message);
      }
    }

    // Buscar atividade usando DatabaseManager
    console.log('üîç Chamando DatabaseManager.findById...');
    const atividade = DatabaseManager.findById('atividades', activityId);
    console.log('üìã Resultado do findById:', atividade);

    if (!atividade) {
      // Se n√£o encontrou e ainda n√£o tentou retry, tentar novamente
      if (retryCount < 2) {
        console.log(`‚è≥ Atividade n√£o encontrada, tentando novamente em 200ms... (retry ${retryCount + 1})`);
        Utilities.sleep(200);
        return getActivityById(activityId, retryCount + 1);
      }

      console.error('‚ùå Atividade n√£o encontrada no banco ap√≥s todas as tentativas:', activityId);
      return {
        ok: false,
        error: `Atividade ${activityId} n√£o encontrada`
      };
    }

    // Limpar e serializar dados para evitar problemas de comunica√ß√£o
    const cleanActivity = {
      id: atividade.id || '',
      titulo: atividade.titulo || '',
      descricao: atividade.descricao || '',
      data: atividade.data ? atividade.data.toString() : '',
      status: atividade.status || 'Pendente',
      atribuido_uid: atividade.atribuido_uid || '',
      categorias_ids: atividade.categorias_ids || '',
      tags: atividade.tags || '',
      criado_por: atividade.criado_por || '',
      criado_em: atividade.criado_em ? atividade.criado_em.toString() : '',
      atualizado_em: atividade.atualizado_em ? atividade.atualizado_em.toString() : ''
    };

    console.log('‚úÖ Atividade encontrada e limpa:', {
      id: cleanActivity.id,
      titulo: cleanActivity.titulo,
      data: cleanActivity.data,
      status: cleanActivity.status
    });

    console.log('üì§ Retornando atividade serializada:', JSON.stringify(cleanActivity));

    return {
      ok: true,
      activity: cleanActivity
    };

  } catch (error) {
    console.error('‚ùå Erro ao buscar atividade:', error);
    console.error('‚ùå Stack trace:', error.stack);

    // Se erro e ainda n√£o tentou retry, tentar novamente
    if (retryCount < 2) {
      console.log(`‚è≥ Erro na busca, tentando novamente em 300ms... (retry ${retryCount + 1})`);
      Utilities.sleep(300);
      return getActivityById(activityId, retryCount + 1);
    }

    return {
      ok: false,
      error: error.message || 'Erro interno do servidor'
    };
  }
}

// ============================================================================
// FUN√á√ÉO REMOVIDA: updateActivity() - activities_api.gs:335-453
//
// Motivo: Fun√ß√£o √≥rf√£/n√£o utilizada - substitu√≠da por updateActivityWithTargets()
// - Frontend usa apenas updateActivityWithTargets() (app_migrated.html:5442)
// - Esta fun√ß√£o n√£o suportava alvos (targets)
// - Funcionalidade consolidada em updateActivityWithTargets()
//
// Removido em: Migra√ß√£o #2 - Fase 4, Consolida√ß√£o de fun√ß√µes de update
// Data: 02/10/2025
// Linhas removidas: 119 (incluindo JSDoc)
// ============================================================================

/**
 * Marca uma atividade como conclu√≠da
 * @param {string} sessionId - ID da sess√£o (injetado automaticamente pelo apiCall)
 * @param {string} activityId - ID da atividade
 * @returns {Object} Resultado da opera√ß√£o
 */
async function completeActivity(sessionId, activityId, relato = '') {
  try {
    Logger.info('ActivitiesAPI', 'Marcando atividade como conclu√≠da', {
      activityId,
      sessionId: sessionId ? '‚úì' : '‚úó',
      hasRelato: relato && relato.trim().length > 0
    });

    // Validar sess√£o (helper centralizado)
    const auth = await requireSession(sessionId, 'ActivitiesAPI');
    if (!auth.ok) return auth;

    if (!activityId) {
      throw new Error('ID da atividade √© obrigat√≥rio');
    }

    // Validar relato (opcional, mas se fornecido deve respeitar limite)
    let relatoFinal = '';
    if (relato && typeof relato === 'string') {
      relatoFinal = relato.trim();
      if (relatoFinal.length > 1000) {
        return {
          ok: false,
          error: 'Relato n√£o pode ter mais de 1000 caracteres'
        };
      }
    }

    const userId = auth.session.user_id;

    // Buscar dados do usu√°rio
    const usuario = DatabaseManager.findById('usuarios', userId);
    if (!usuario) {
      Logger.error('ActivitiesAPI', 'Usu√°rio n√£o encontrado ao completar atividade', { userId, activityId });
      throw new Error('Usu√°rio n√£o encontrado na base de dados');
    }

    // Dados para atualiza√ß√£o - apenas campos necess√°rios
    // Campo atualizado_em preenchido automaticamente pelo DatabaseManager
    const updateData = {
      status: 'Concluida',
      relato: relatoFinal,
      atualizado_uid: usuario.uid
    };

    // Verificar se a atividade existe
    const existingActivity = DatabaseManager.findById('atividades', activityId);

    if (!existingActivity) {
      Logger.warn('ActivitiesAPI', 'Atividade n√£o encontrada ao tentar completar', { activityId });
      return {
        ok: false,
        error: `Atividade ${activityId} n√£o encontrada`
      };
    }

    // Usar DatabaseManager para atualizar
    const result = await DatabaseManager.update('atividades', activityId, updateData);

    if (result && result.success) {
      Logger.info('ActivitiesAPI', 'Atividade marcada como conclu√≠da', { activityId, userId: usuario.uid });

      // For√ßar limpeza de cache
      try {
        if (typeof CacheManager !== 'undefined') {
          CacheManager.invalidate('atividades');
        }
      } catch (cacheError) {
        Logger.warn('ActivitiesAPI', 'Erro ao invalidar cache', { error: cacheError.message });
      }

      return {
        ok: true,
        message: 'Atividade marcada como conclu√≠da com sucesso'
      };
    } else {
      Logger.error('ActivitiesAPI', 'Falha ao atualizar status da atividade', { activityId, result });
      return {
        ok: false,
        error: result?.error || 'Erro ao marcar atividade como conclu√≠da'
      };
    }

  } catch (error) {
    Logger.error('ActivitiesAPI', 'Erro ao marcar atividade como conclu√≠da', {
      activityId,
      error: error.message,
      stack: error.stack
    });
    return {
      ok: false,
      error: error.message || 'Erro interno do servidor'
    };
  }
}

/**
 * Cancela uma atividade com motivo obrigat√≥rio
 * Permiss√£o: Apenas admin OU respons√°vel pela atividade
 * @param {string} sessionId - ID da sess√£o (injetado automaticamente pelo apiCall)
 * @param {string} activityId - ID da atividade
 * @param {string} relato - Motivo do cancelamento (obrigat√≥rio, m√≠nimo 10 caracteres)
 * @returns {Object} Resultado da opera√ß√£o
 */
async function cancelActivityApi(sessionId, activityId, relato) {
  try {
    Logger.info('ActivitiesAPI', 'Cancelando atividade', {
      activityId,
      sessionId: sessionId ? '‚úì' : '‚úó'
    });

    // 1. Validar sess√£o
    const auth = await requireSession(sessionId, 'ActivitiesAPI');
    if (!auth.ok) return auth;

    if (!activityId) {
      throw new Error('ID da atividade √© obrigat√≥rio');
    }

    // 2. Validar relato (OBRIGAT√ìRIO para cancelamento)
    if (!relato || typeof relato !== 'string' || relato.trim().length < 10) {
      return {
        ok: false,
        error: 'Motivo do cancelamento √© obrigat√≥rio (m√≠nimo 10 caracteres)'
      };
    }

    const relatoFinal = relato.trim();
    if (relatoFinal.length > 1000) {
      return {
        ok: false,
        error: 'Motivo n√£o pode ter mais de 1000 caracteres'
      };
    }

    const userId = auth.session.user_id;

    // 3. Buscar atividade
    const existingActivity = DatabaseManager.findById('atividades', activityId);
    if (!existingActivity) {
      Logger.warn('ActivitiesAPI', 'Atividade n√£o encontrada ao tentar cancelar', { activityId });
      return {
        ok: false,
        error: `Atividade ${activityId} n√£o encontrada`
      };
    }

    // 4. Validar status atual (n√£o pode cancelar conclu√≠da ou j√° cancelada)
    const statusLower = (existingActivity.status || '').toLowerCase();

    if (statusLower === 'cancelada') {
      return {
        ok: false,
        error: 'Atividade j√° est√° cancelada'
      };
    }

    if (statusLower === 'concluida') {
      return {
        ok: false,
        error: 'N√£o √© poss√≠vel cancelar atividades conclu√≠das'
      };
    }

    // 5. Verificar permiss√£o (admin OU respons√°vel)
    const ADMIN_UIDS = ['U001', 'U002', 'U003', 'U004'];
    const isAdmin = ADMIN_UIDS.includes(userId);
    const isResponsavel = (existingActivity.atribuido_uid === userId);

    if (!isAdmin && !isResponsavel) {
      Logger.warn('ActivitiesAPI', 'Permiss√£o negada ao cancelar', {
        userId,
        activityId,
        atribuido_uid: existingActivity.atribuido_uid
      });
      return {
        ok: false,
        error: 'Voc√™ n√£o tem permiss√£o para cancelar esta atividade'
      };
    }

    // 6. Buscar dados do usu√°rio
    const usuario = DatabaseManager.findById('usuarios', userId);
    if (!usuario) {
      Logger.error('ActivitiesAPI', 'Usu√°rio n√£o encontrado ao cancelar atividade', { userId, activityId });
      throw new Error('Usu√°rio n√£o encontrado na base de dados');
    }

    // 7. Cancelar atividade
    const updateData = {
      status: 'Cancelada',
      relato: relatoFinal,
      atualizado_uid: usuario.uid
    };

    const result = await DatabaseManager.update('atividades', activityId, updateData);

    if (result && result.success) {
      Logger.info('ActivitiesAPI', 'Atividade cancelada', {
        activityId,
        userId: usuario.uid,
        motivoPreview: relatoFinal.substring(0, 50) + '...'
      });

      // For√ßar limpeza de cache
      try {
        if (typeof CacheManager !== 'undefined') {
          CacheManager.invalidate('atividades');
        }
      } catch (cacheError) {
        Logger.warn('ActivitiesAPI', 'Erro ao invalidar cache', { error: cacheError.message });
      }

      return {
        ok: true,
        message: 'Atividade cancelada com sucesso'
      };
    } else {
      Logger.error('ActivitiesAPI', 'Falha ao cancelar atividade', { activityId, result });
      return {
        ok: false,
        error: result?.error || 'Erro ao cancelar atividade'
      };
    }

  } catch (error) {
    Logger.error('ActivitiesAPI', 'Erro ao cancelar atividade', {
      activityId,
      error: error.message,
      stack: error.stack
    });
    return {
      ok: false,
      error: error.message || 'Erro interno do servidor'
    };
  }
}
