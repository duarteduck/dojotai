/**
 * Sistema Dojotai V2.0 - Configura√ß√£o Central
 * Criado: 18/09/2025
 * Semana 1: Configura√ß√£o b√°sica e core
 */

const APP_CONFIG = {
  VERSION: '2.0.0-alpha.1',
  TZ: 'America/Sao_Paulo',

  // Configura√ß√£o de cache
  CACHE_TTL_MINUTES: 5,

  // Configura√ß√£o de logs
  LOG_LEVEL: 'INFO', // DEBUG, INFO, WARN, ERROR

  // Configura√ß√£o de sess√µes
  SESSION: {
    TTL_HOURS: 8,        // 8 horas de dura√ß√£o da sess√£o
    CLEANUP_INTERVAL: 60, // Limpar sess√µes expiradas a cada 60 min
    MAX_SESSIONS_PER_USER: 3 // M√°ximo 3 sess√µes simult√¢neas por usu√°rio
  },

  // Configura√ß√£o de valida√ß√µes
  VALIDATION: {
    ENABLE_FK_VALIDATION: true,     // Validar foreign keys
    ENABLE_BUSINESS_RULES: true,    // Validar regras de neg√≥cio
    ENABLE_ADVANCED_VALIDATION: true, // Validar pattern, enum, etc
    ENABLE_UNIQUE_CONSTRAINTS: true,  // Validar campos √∫nicos
    FAIL_ON_VALIDATION_ERROR: true   // Falhar opera√ß√£o se valida√ß√£o falhar
  },

  // Configura√ß√£o de tags
  TAGS: {
    MAX_LENGTH: 200,              // Tamanho m√°ximo do campo tags
    SEPARATOR: ',',               // Separador entre tags
    NORMALIZE_CASE: true,         // Converter para lowercase
    TRIM_WHITESPACE: true,        // Remover espa√ßos em branco
    ALLOWED_PATTERN: '^[a-zA-Z0-9_,\\s]*$' // Padr√£o permitido
  },

  // Configura√ß√£o de auditoria/hist√≥rico
  AUDIT: {
    ENABLE_AUDIT_LOG: false,      // Ativar log de auditoria
    LOG_OPERATIONS: ['INSERT', 'UPDATE', 'DELETE'], // Opera√ß√µes para logar
    RETENTION_DAYS: 365,          // Dias para manter logs
    INCLUDE_DATA_CHANGES: true    // Incluir dados alterados nos logs
  },

  // Configura√ß√£o de notifica√ß√µes (futuro)
  NOTIFICATIONS: {
    ENABLE_NOTIFICATIONS: false,  // Ativar sistema de notifica√ß√µes
    DEFAULT_TTL_DAYS: 30,        // Dias para expirar notifica√ß√µes
    MAX_NOTIFICATIONS_PER_USER: 50, // M√°ximo de notifica√ß√µes por usu√°rio
    AUTO_CLEANUP: true           // Limpeza autom√°tica de notifica√ß√µes expiradas
  },

  // Configura√ß√£o principal de planilhas
  PLANILHAS: {
    // ID da planilha principal de configura√ß√£o
    SSID: '1hfl-CeO6nK4FLYl4uacK5NncBoJ3q-8PPzUWh7W6PmY',

    // Named range para configura√ß√£o
    NAMED: 'PLANILHA_TBL',

    // Fallback A1 notation
    A1: 'Planilhas!A1:H'
  },

  // Tabelas ser√£o carregadas dinamicamente do dicion√°rio
  // Usar getExistingTables() para obter lista atual

  // NOTA: Padr√µes de ID agora s√£o obtidos automaticamente do DATA_DICTIONARY
  // Cada tabela define seu padr√£o no campo 'pattern' do seu campo 'id'
  // Ex: pattern: '^PERF-\\d+$' ‚Üí gera PERF-001, PERF-002, etc.
};

/**
 * Fun√ß√£o para obter configura√ß√£o
 * Compat√≠vel com sistema atual
 */
function getAppConfig() {
  return APP_CONFIG;
}

/**
 * Fun√ß√£o para obter todas as tabelas do dicion√°rio
 * @returns {Object} Tabelas dispon√≠veis
 */
function getExistingTables() {
  if (typeof DATA_DICTIONARY === 'undefined') {
    console.warn('‚ö†Ô∏è DATA_DICTIONARY n√£o encontrado, usando configura√ß√£o b√°sica');
    return {
      usuarios: { name: 'usuarios', description: 'Usu√°rios do sistema' },
      atividades: { name: 'atividades', description: 'Atividades do dojo' },
      membros: { name: 'membros', description: 'Membros do dojo' },
      participacoes: { name: 'participacoes', description: 'Participa√ß√µes em atividades' },
      categorias_atividades: { name: 'categorias_atividades', description: 'Categorias de atividades' },
      menu: { name: 'menu', description: 'Menu din√¢mico do sistema' },
      planilhas: { name: 'planilhas', description: 'Configura√ß√£o de planilhas' }
    };
  }

  const tables = {};
  Object.keys(DATA_DICTIONARY).forEach(key => {
    const tableConfig = DATA_DICTIONARY[key];
    tables[key] = {
      name: tableConfig.tableName || key,
      description: tableConfig.description || 'Tabela do sistema'
    };
  });

  return tables;
}

/**
 * Fun√ß√£o para obter configura√ß√£o de uma tabela espec√≠fica
 * @param {string} tableName - Nome da tabela
 * @returns {Object|null} Configura√ß√£o da tabela
 */
function getTableConfig(tableName) {
  const existingTables = getExistingTables();
  return existingTables[tableName] || null;
}

/**
 * Fun√ß√£o para obter padr√£o de ID
 * @param {string} tableName - Nome da tabela
 * @returns {Object} Padr√£o de ID da tabela
 */
function getIdPattern(tableName) {
  return APP_CONFIG.ID_PATTERNS[tableName] || {
    prefix: 'GEN',
    format: 'GEN-{timestamp}',
    description: 'ID gen√©rico'
  };
}

/**
 * Log de inicializa√ß√£o
 */
function logConfigInit() {
  const existingTables = getExistingTables();
  console.log(`üöÄ Sistema Dojotai V${APP_CONFIG.VERSION} inicializado`);
  console.log(`üìä Tabelas configuradas: ${Object.keys(existingTables).length}`);
  console.log(`üïí Timezone: ${APP_CONFIG.TZ}`);
  console.log(`üìù Log Level: ${APP_CONFIG.LOG_LEVEL}`);
}