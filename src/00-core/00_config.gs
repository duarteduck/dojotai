/**
 * Sistema Dojotai V2.0 - Configura√ß√£o Central
 *
 * @fileoverview Configura√ß√µes centralizadas do sistema incluindo cache, logs,
 * sess√µes, valida√ß√µes e configura√ß√µes de planilhas.
 *
 * @author Sistema Dojotai Team
 * @version 2.0.0-alpha.1
 * @since 18/09/2025
 */

/**
 * Configura√ß√£o principal do sistema
 * @type {Object}
 * @constant
 */
const APP_CONFIG = {
  /** @type {string} Vers√£o atual do sistema */
  VERSION: '2.0.0-alpha.1',

  /** @type {string} Timezone padr√£o (UTC-3 Brasil) */
  TZ: 'America/Sao_Paulo',

  /** @type {number} TTL do cache em minutos */
  CACHE_TTL_MINUTES: 5,

  /** @type {string} N√≠vel de log (DEBUG|INFO|WARN|ERROR) */
  LOG_LEVEL: 'INFO',

  /**
   * Configura√ß√£o de persist√™ncia de logs
   * @type {Object}
   */
  LOG_PERSISTENCE: {
    /** @type {string[]} N√≠veis que sempre persistem */
    ALWAYS_PERSIST: ['ERROR'],

    /** @type {string[]} Contextos importantes para INFO */
    IMPORTANT_CONTEXTS: [
      'SessionManager',
      'SecurityManager',
      'Application',
      'AuthManager',
      'UserAction',
      'BusinessLogic'
    ],

    /** @type {string[]} Padr√µes para excluir de WARN */
    WARN_EXCLUDE_PATTERNS: [
      'FK validation failed',
      'validation completed',
      'Cache',
      'Query completed',
      'Insert completed'
    ],

    /** @type {string[]} Contextos que n√£o persistem WARN */
    WARN_EXCLUDE_CONTEXTS: ['ValidationEngine', 'PerformanceMetrics', 'PerformanceMonitor']
  },

  /**
   * Configura√ß√£o de debug tempor√°rio
   * @type {Object}
   */
  DEBUG: {
    /** @type {boolean} Desabilitar todo o sistema de performance temporariamente */
    DISABLE_PERFORMANCE_SYSTEM: true
  },

  /**
   * Configura√ß√£o de sess√µes
   * @type {Object}
   */
  SESSION: {
    /** @type {number} Dura√ß√£o da sess√£o em horas */
    // Sess√£o estendida automaticamente a cada atividade do usu√°rio
    TTL_HOURS: 4,  // 4 horas - renovado automaticamente em cada opera√ß√£o

    /** @type {number} Intervalo de limpeza em minutos */
    CLEANUP_INTERVAL: 60,

    /** @type {number} M√°ximo de sess√µes simult√¢neas por usu√°rio */
    MAX_SESSIONS_PER_USER: 3
  },

  /**
   * Configura√ß√£o de valida√ß√µes
   * @type {Object}
   */
  VALIDATION: {
    /** @type {boolean} Validar foreign keys */
    ENABLE_FK_VALIDATION: true,

    /** @type {boolean} Validar regras de neg√≥cio */
    ENABLE_BUSINESS_RULES: true,

    /** @type {boolean} Validar pattern, enum, etc */
    ENABLE_ADVANCED_VALIDATION: true,

    /** @type {boolean} Validar campos √∫nicos */
    ENABLE_UNIQUE_CONSTRAINTS: true,

    /** @type {boolean} Falhar opera√ß√£o se valida√ß√£o falhar */
    FAIL_ON_VALIDATION_ERROR: true
  },

  /**
   * Configura√ß√£o de tags
   * @type {Object}
   */
  TAGS: {
    /** @type {number} Tamanho m√°ximo do campo tags */
    MAX_LENGTH: 200,

    /** @type {string} Separador entre tags */
    SEPARATOR: ',',

    /** @type {boolean} Converter para lowercase */
    NORMALIZE_CASE: true,

    /** @type {boolean} Remover espa√ßos em branco */
    TRIM_WHITESPACE: true,

    /** @type {string} Padr√£o permitido (regex) */
    ALLOWED_PATTERN: '^[a-zA-Z0-9_,\\s]*$'
  },

  /**
   * Configura√ß√£o de auditoria/hist√≥rico
   * @type {Object}
   */
  AUDIT: {
    /** @type {boolean} Ativar log de auditoria */
    ENABLE_AUDIT_LOG: false,

    /** @type {string[]} Opera√ß√µes para logar */
    LOG_OPERATIONS: ['INSERT', 'UPDATE', 'DELETE'],

    /** @type {number} Dias para manter logs */
    RETENTION_DAYS: 365,

    /** @type {boolean} Incluir dados alterados nos logs */
    INCLUDE_DATA_CHANGES: true
  },

  /**
   * Configura√ß√£o de notifica√ß√µes (futuro)
   * @type {Object}
   */
  NOTIFICATIONS: {
    /** @type {boolean} Ativar sistema de notifica√ß√µes */
    ENABLE_NOTIFICATIONS: false,

    /** @type {number} Dias para expirar notifica√ß√µes */
    DEFAULT_TTL_DAYS: 30,

    /** @type {number} M√°ximo de notifica√ß√µes por usu√°rio */
    MAX_NOTIFICATIONS_PER_USER: 50,

    /** @type {boolean} Limpeza autom√°tica de notifica√ß√µes expiradas */
    AUTO_CLEANUP: true
  },

  /**
   * Configura√ß√£o principal de planilhas
   * @type {Object}
   */
  PLANILHAS: {
    /** @type {string} ID da planilha principal de configura√ß√£o */
    SSID: '1hfl-CeO6nK4FLYl4uacK5NncBoJ3q-8PPzUWh7W6PmY',

    /** @type {string} Named range para configura√ß√£o */
    NAMED: 'PLANILHA_TBL',

    /** @type {string} Fallback A1 notation */
    A1: 'Planilhas!A1:H'
  },

  /**
   * NOTA: Tabelas s√£o carregadas dinamicamente do DATA_DICTIONARY
   * Use getExistingTables() para obter lista atual
   *
   * Padr√µes de ID s√£o obtidos automaticamente do DATA_DICTIONARY
   * Cada tabela define seu padr√£o no campo 'pattern' do seu campo 'id'
   * Ex: pattern: '^PERF-\\d+$' ‚Üí gera PERF-001, PERF-002, etc.
   */
};

/**
 * Obt√©m a configura√ß√£o principal do sistema
 *
 * @description Retorna o objeto de configura√ß√£o completo do sistema.
 * Compat√≠vel com o sistema atual para manter retrocompatibilidade.
 *
 * @returns {Object} Objeto de configura√ß√£o completo
 * @example
 * const config = getAppConfig();
 * console.log(config.VERSION); // '2.0.0-alpha.1'
 *
 * @since 1.0.0
 */
function getAppConfig() {
  return APP_CONFIG;
}

/**
 * Obt√©m todas as tabelas dispon√≠veis do dicion√°rio de dados
 *
 * @description Carrega dinamicamente as tabelas do DATA_DICTIONARY.
 * Se o dicion√°rio n√£o estiver dispon√≠vel, retorna configura√ß√£o b√°sica.
 *
 * @returns {Object<string, {name: string, description: string}>} Mapa de tabelas dispon√≠veis
 *
 * @example
 * const tables = getExistingTables();
 * console.log(tables.usuarios.name); // 'usuarios'
 * console.log(tables.usuarios.description); // 'Usu√°rios do sistema'
 *
 * @since 2.0.0
 */
function getExistingTables() {
  if (typeof DATA_DICTIONARY === 'undefined') {
    console.warn('‚ö†Ô∏è DATA_DICTIONARY n√£o encontrado, usando configura√ß√£o b√°sica');
    return {
      usuarios: { name: 'usuarios', description: 'Usu√°rios do sistema' },
      atividades: { name: 'atividades', description: 'Atividades do dojo' },
      membros: { name: 'membros', description: 'Membros do dojo' },
      participacoes: { name: 'participacoes', description: 'Participa√ß√µes em atividades' },
      categorias_atividades: { name: 'categorias_atividades', description: 'Categorias de atividades' },
      menu: { name: 'menu', description: 'Menu din√¢mico do sistema' },
      planilhas: { name: 'planilhas', description: 'Configura√ß√£o de planilhas' }
    };
  }

  const tables = {};
  Object.keys(DATA_DICTIONARY).forEach(key => {
    const tableConfig = DATA_DICTIONARY[key];
    tables[key] = {
      name: tableConfig.tableName || key,
      description: tableConfig.description || 'Tabela do sistema'
    };
  });

  return tables;
}

/**
 * Obt√©m a configura√ß√£o de uma tabela espec√≠fica
 *
 * @description Busca a configura√ß√£o de uma tabela pelo nome.
 * Retorna null se a tabela n√£o existir.
 *
 * @param {string} tableName - Nome da tabela a buscar
 * @returns {Object|null} Configura√ß√£o da tabela ou null se n√£o encontrada
 *
 * @example
 * const userTable = getTableConfig('usuarios');
 * if (userTable) {
 *   console.log(userTable.description);
 * }
 *
 * @since 2.0.0
 */
function getTableConfig(tableName) {
  if (!tableName || typeof tableName !== 'string') {
    console.warn('‚ö†Ô∏è getTableConfig: tableName deve ser uma string v√°lida');
    return null;
  }

  const existingTables = getExistingTables();
  return existingTables[tableName] || null;
}

/**
 * Obt√©m o padr√£o de ID para uma tabela
 *
 * @description Busca o padr√£o de ID definido no DATA_DICTIONARY.
 * Retorna padr√£o gen√©rico se n√£o encontrado.
 *
 * @param {string} tableName - Nome da tabela
 * @returns {Object} Padr√£o de ID da tabela
 * @returns {string} returns.prefix - Prefixo do ID
 * @returns {string} returns.format - Formato do ID
 * @returns {string} returns.description - Descri√ß√£o do padr√£o
 *
 * @example
 * const pattern = getIdPattern('usuarios');
 * console.log(pattern.prefix); // 'USR'
 *
 * @since 2.0.0
 * @deprecated Use DATA_DICTIONARY diretamente para padr√µes de ID
 */
function getIdPattern(tableName) {
  if (!tableName || typeof tableName !== 'string') {
    console.warn('‚ö†Ô∏è getIdPattern: tableName deve ser uma string v√°lida');
  }

  // Fallback para compatibilidade (APP_CONFIG.ID_PATTERNS n√£o existe mais)
  return {
    prefix: 'GEN',
    format: 'GEN-{timestamp}',
    description: 'ID gen√©rico (deprecated)'
  };
}

/**
 * Log de inicializa√ß√£o do sistema
 *
 * @description Exibe informa√ß√µes b√°sicas sobre a configura√ß√£o do sistema
 * no console. √ötil para debugging e verifica√ß√£o da inicializa√ß√£o.
 *
 * @returns {void}
 *
 * @example
 * logConfigInit();
 * // üöÄ Sistema Dojotai V2.0.0-alpha.1 inicializado
 * // üìä Tabelas configuradas: 7
 * // üïí Timezone: America/Sao_Paulo
 * // üìù Log Level: INFO
 *
 * @since 2.0.0
 */
function logConfigInit() {
  const existingTables = getExistingTables();
  console.log(`üöÄ Sistema Dojotai V${APP_CONFIG.VERSION} inicializado`);
  console.log(`üìä Tabelas configuradas: ${Object.keys(existingTables).length}`);
  console.log(`üïí Timezone: ${APP_CONFIG.TZ}`);
  console.log(`üìù Log Level: ${APP_CONFIG.LOG_LEVEL}`);
}