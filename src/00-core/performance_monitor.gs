/**
 * Performance Monitor - Sistema Avan√ßado de Monitoramento
 * Criado: 22/09/2025
 *
 * Expans√£o do PerformanceMetrics existente com:
 * - Monitoramento de opera√ß√µes lentas
 * - Alertas autom√°ticos
 * - Relat√≥rios detalhados
 * - Sistema de benchmarks
 */

/**
 * PerformanceMonitor - Sistema avan√ßado de monitoramento
 */
class PerformanceMonitor {

  /**
   * Inicializar sistema de monitoramento
   */
  static init() {
    if (!this._initialized) {
      this._slowOperations = [];
      this._alerts = [];
      this._benchmarks = this._getDefaultBenchmarks();
      this._initialized = true;

      Logger.info('PerformanceMonitor', 'Sistema inicializado', {
        benchmarks: Object.keys(this._benchmarks).length
      });
    }
  }

  /**
   * Benchmarks padr√£o para diferentes opera√ß√µes (em ms)
   */
  static _getDefaultBenchmarks() {
    return {
      'QUERY': {
        fast: 500,      // < 500ms = R√°pido
        normal: 2000,   // < 2s = Normal
        slow: 5000,     // < 5s = Lento
        critical: 10000 // > 10s = Cr√≠tico
      },
      'INSERT': {
        fast: 1000,
        normal: 3000,
        slow: 7000,
        critical: 15000
      },
      'UPDATE': {
        fast: 800,
        normal: 2500,
        slow: 6000,
        critical: 12000
      },
      'DELETE': {
        fast: 500,
        normal: 1500,
        slow: 4000,
        critical: 8000
      },
      'FK_VALIDATION': {
        fast: 200,
        normal: 800,
        slow: 2000,
        critical: 5000
      },
      'FULL_VALIDATION': {
        fast: 500,
        normal: 1500,
        slow: 3000,
        critical: 8000
      }
    };
  }

  /**
   * Monitorar opera√ß√£o e classificar performance
   * @param {string} operation - Tipo de opera√ß√£o
   * @param {string} tableName - Nome da tabela
   * @param {number} timeMs - Tempo em millisegundos
   * @param {Object} context - Contexto adicional
   */
  static trackOperation(operation, tableName, timeMs, context = {}) {
    this.init();

    // Usar PerformanceMetrics existente
    PerformanceMetrics.trackOperation(operation, tableName, timeMs, context.cacheHit || false);

    // Classificar performance
    const classification = this._classifyOperation(operation, timeMs);

    // Se for opera√ß√£o lenta, registrar
    if (classification.level >= 2) { // Lento ou Cr√≠tico
      this._recordSlowOperation({
        operation,
        tableName,
        timeMs,
        classification,
        context,
        timestamp: new Date()
      });
    }

    // Gerar alerta se cr√≠tico
    if (classification.level >= 3) { // Cr√≠tico
      this._generateAlert({
        type: 'CRITICAL_PERFORMANCE',
        operation,
        tableName,
        timeMs,
        classification,
        timestamp: new Date()
      });
    }

    Logger.debug('PerformanceMonitor', `${operation} classificada como ${classification.label}`, {
      operation, tableName, timeMs, level: classification.label
    });
  }

  /**
   * Classificar opera√ß√£o baseada em benchmarks
   * @param {string} operation - Tipo de opera√ß√£o
   * @param {number} timeMs - Tempo em millisegundos
   * @returns {Object} Classifica√ß√£o
   */
  static _classifyOperation(operation, timeMs) {
    const benchmarks = this._benchmarks[operation] || this._benchmarks['QUERY'];

    if (timeMs <= benchmarks.fast) {
      return { level: 0, label: 'FAST', color: 'üü¢' };
    } else if (timeMs <= benchmarks.normal) {
      return { level: 1, label: 'NORMAL', color: 'üü°' };
    } else if (timeMs <= benchmarks.slow) {
      return { level: 2, label: 'SLOW', color: 'üü†' };
    } else {
      return { level: 3, label: 'CRITICAL', color: 'üî¥' };
    }
  }

  /**
   * Registrar opera√ß√£o lenta
   * @param {Object} slowOp - Dados da opera√ß√£o lenta
   */
  static _recordSlowOperation(slowOp) {
    this._slowOperations.push(slowOp);

    // Manter apenas √∫ltimas 100 opera√ß√µes lentas
    if (this._slowOperations.length > 100) {
      this._slowOperations = this._slowOperations.slice(-100);
    }

    Logger.warn('PerformanceMonitor', `Opera√ß√£o lenta detectada: ${slowOp.operation}`, {
      tableName: slowOp.tableName,
      timeMs: slowOp.timeMs,
      classification: slowOp.classification.label
    });
  }

  /**
   * Gerar alerta cr√≠tico
   * @param {Object} alert - Dados do alerta
   */
  static _generateAlert(alert) {
    this._alerts.push(alert);

    // Manter apenas √∫ltimos 50 alertas
    if (this._alerts.length > 50) {
      this._alerts = this._alerts.slice(-50);
    }

    Logger.error('PerformanceMonitor', `ALERTA CR√çTICO: ${alert.operation} muito lenta`, {
      tableName: alert.tableName,
      timeMs: alert.timeMs,
      benchmark: this._benchmarks[alert.operation]?.critical || 'N/A'
    });
  }

  /**
   * Obter relat√≥rio completo de performance
   * @returns {Object} Relat√≥rio detalhado
   */
  static getAdvancedReport() {
    this.init();

    // Relat√≥rio base do PerformanceMetrics
    const baseReport = PerformanceMetrics.getReport();

    // An√°lise de opera√ß√µes lentas
    const slowOpsAnalysis = this._analyzeSlowOperations();

    // An√°lise de alertas
    const alertsAnalysis = this._analyzeAlerts();

    // Recomenda√ß√µes autom√°ticas
    const recommendations = this._generateRecommendations(baseReport, slowOpsAnalysis);

    const report = {
      ...baseReport,
      advanced: {
        slowOperations: {
          count: this._slowOperations.length,
          analysis: slowOpsAnalysis
        },
        alerts: {
          count: this._alerts.length,
          analysis: alertsAnalysis
        },
        recommendations,
        benchmarks: this._benchmarks,
        healthScore: this._calculateHealthScore(baseReport, slowOpsAnalysis, alertsAnalysis)
      }
    };

    Logger.info('PerformanceMonitor', 'Relat√≥rio avan√ßado gerado', {
      slowOpsCount: this._slowOperations.length,
      alertsCount: this._alerts.length,
      healthScore: report.advanced.healthScore
    });

    return report;
  }

  /**
   * Analisar opera√ß√µes lentas
   * @returns {Object} An√°lise das opera√ß√µes lentas
   */
  static _analyzeSlowOperations() {
    if (this._slowOperations.length === 0) {
      return { message: 'Nenhuma opera√ß√£o lenta detectada' };
    }

    // Agrupar por opera√ß√£o
    const byOperation = {};
    const byTable = {};
    let totalSlowTime = 0;

    this._slowOperations.forEach(op => {
      // Por opera√ß√£o
      if (!byOperation[op.operation]) {
        byOperation[op.operation] = { count: 0, totalTime: 0, avgTime: 0 };
      }
      byOperation[op.operation].count++;
      byOperation[op.operation].totalTime += op.timeMs;

      // Por tabela
      if (!byTable[op.tableName]) {
        byTable[op.tableName] = { count: 0, totalTime: 0, avgTime: 0 };
      }
      byTable[op.tableName].count++;
      byTable[op.tableName].totalTime += op.timeMs;

      totalSlowTime += op.timeMs;
    });

    // Calcular m√©dias
    Object.values(byOperation).forEach(op => {
      op.avgTime = Math.round(op.totalTime / op.count);
    });
    Object.values(byTable).forEach(table => {
      table.avgTime = Math.round(table.totalTime / table.count);
    });

    return {
      total: this._slowOperations.length,
      totalTime: totalSlowTime,
      avgTime: Math.round(totalSlowTime / this._slowOperations.length),
      byOperation,
      byTable,
      worstOperation: this._findWorstPerformer(byOperation),
      worstTable: this._findWorstPerformer(byTable)
    };
  }

  /**
   * Analisar alertas cr√≠ticos
   * @returns {Object} An√°lise dos alertas
   */
  static _analyzeAlerts() {
    if (this._alerts.length === 0) {
      return { message: 'Nenhum alerta cr√≠tico' };
    }

    const last24h = this._alerts.filter(alert =>
      new Date() - alert.timestamp < 24 * 60 * 60 * 1000
    );

    return {
      total: this._alerts.length,
      last24h: last24h.length,
      mostRecentAlert: this._alerts[this._alerts.length - 1],
      criticalOperations: [...new Set(this._alerts.map(a => a.operation))]
    };
  }

  /**
   * Encontrar pior performer
   * @param {Object} performers - Objeto com performers
   * @returns {Object} Pior performer
   */
  static _findWorstPerformer(performers) {
    let worst = null;
    let worstScore = 0;

    Object.entries(performers).forEach(([key, data]) => {
      // Score = count * avgTime (quanto mais opera√ß√µes lentas e mais demoradas, pior)
      const score = data.count * data.avgTime;
      if (score > worstScore) {
        worstScore = score;
        worst = { key, ...data, score };
      }
    });

    return worst;
  }

  /**
   * Gerar recomenda√ß√µes autom√°ticas
   * @param {Object} baseReport - Relat√≥rio base
   * @param {Object} slowOpsAnalysis - An√°lise de opera√ß√µes lentas
   * @returns {Array} Lista de recomenda√ß√µes
   */
  static _generateRecommendations(baseReport, slowOpsAnalysis) {
    const recommendations = [];

    // Cache Hit Rate baixo
    if (baseReport.summary.cacheHitRate < 0.5) {
      recommendations.push({
        type: 'CACHE',
        priority: 'HIGH',
        message: `Cache hit rate baixo (${(baseReport.summary.cacheHitRate * 100).toFixed(1)}%). Considere aumentar TTL do cache.`
      });
    }

    // Muitas opera√ß√µes lentas
    if (slowOpsAnalysis.total > 10) {
      recommendations.push({
        type: 'PERFORMANCE',
        priority: 'MEDIUM',
        message: `${slowOpsAnalysis.total} opera√ß√µes lentas detectadas. Considere otimiza√ß√£o de queries.`
      });
    }

    // Opera√ß√£o espec√≠fica muito lenta
    if (slowOpsAnalysis.worstOperation && slowOpsAnalysis.worstOperation.avgTime > 5000) {
      recommendations.push({
        type: 'OPTIMIZATION',
        priority: 'HIGH',
        message: `Opera√ß√£o ${slowOpsAnalysis.worstOperation.key} est√° muito lenta (${slowOpsAnalysis.worstOperation.avgTime}ms). Necessita otimiza√ß√£o urgente.`
      });
    }

    // Tabela espec√≠fica problem√°tica
    if (slowOpsAnalysis.worstTable && slowOpsAnalysis.worstTable.count > 5) {
      recommendations.push({
        type: 'DATABASE',
        priority: 'MEDIUM',
        message: `Tabela ${slowOpsAnalysis.worstTable.key} tem muitas opera√ß√µes lentas. Verifique √≠ndices e estrutura de dados.`
      });
    }

    return recommendations;
  }

  /**
   * Calcular score de sa√∫de do sistema (0-100)
   * @param {Object} baseReport - Relat√≥rio base
   * @param {Object} slowOpsAnalysis - An√°lise de opera√ß√µes lentas
   * @param {Object} alertsAnalysis - An√°lise de alertas
   * @returns {number} Score de sa√∫de
   */
  static _calculateHealthScore(baseReport, slowOpsAnalysis, alertsAnalysis) {
    let score = 100;

    // Penalizar por cache hit rate baixo
    const cacheHitRate = baseReport.summary.cacheHitRate;
    if (cacheHitRate < 0.8) {
      score -= (0.8 - cacheHitRate) * 50; // Max -40 pontos
    }

    // Penalizar por opera√ß√µes lentas
    const slowOpsRatio = slowOpsAnalysis.total / Math.max(baseReport.summary.totalOperations, 1);
    if (slowOpsRatio > 0.1) {
      score -= (slowOpsRatio - 0.1) * 200; // Max -20 pontos por 10% acima
    }

    // Penalizar por alertas cr√≠ticos
    if (alertsAnalysis.last24h > 0) {
      score -= alertsAnalysis.last24h * 5; // -5 pontos por alerta nas √∫ltimas 24h
    }

    // Garantir que score n√£o seja negativo
    return Math.max(Math.round(score), 0);
  }

  /**
   * Limpar dados antigos
   */
  static cleanup() {
    this.init();

    const oneWeekAgo = new Date() - (7 * 24 * 60 * 60 * 1000);

    // Limpar opera√ß√µes lentas antigas
    this._slowOperations = this._slowOperations.filter(op =>
      op.timestamp > oneWeekAgo
    );

    // Limpar alertas antigos
    this._alerts = this._alerts.filter(alert =>
      alert.timestamp > oneWeekAgo
    );

    Logger.info('PerformanceMonitor', 'Limpeza conclu√≠da', {
      slowOpsRemaining: this._slowOperations.length,
      alertsRemaining: this._alerts.length
    });
  }

  /**
   * Exibir relat√≥rio formatado no console
   */
  static logAdvancedReport() {
    const report = this.getAdvancedReport();

    console.log('üìä RELAT√ìRIO AVAN√áADO DE PERFORMANCE');
    console.log('='.repeat(50));

    // Resumo base
    console.log('\nüìà RESUMO GERAL:');
    console.log(`   Total de opera√ß√µes: ${report.summary.totalOperations}`);
    console.log(`   Tempo total: ${report.summary.totalTimeMs}ms`);
    console.log(`   Cache hit rate: ${(report.summary.cacheHitRate * 100).toFixed(1)}%`);

    // Score de sa√∫de
    const healthEmoji = report.advanced.healthScore >= 80 ? 'üíö' :
                       report.advanced.healthScore >= 60 ? 'üíõ' : '‚ù§Ô∏è';
    console.log(`\n${healthEmoji} SCORE DE SA√öDE: ${report.advanced.healthScore}/100`);

    // Opera√ß√µes lentas
    if (report.advanced.slowOperations.count > 0) {
      console.log(`\nüêå OPERA√á√ïES LENTAS: ${report.advanced.slowOperations.count}`);
      const analysis = report.advanced.slowOperations.analysis;
      if (analysis.worstOperation) {
        console.log(`   Pior opera√ß√£o: ${analysis.worstOperation.key} (${analysis.worstOperation.avgTime}ms m√©dio)`);
      }
      if (analysis.worstTable) {
        console.log(`   Pior tabela: ${analysis.worstTable.key} (${analysis.worstTable.count} ops lentas)`);
      }
    }

    // Alertas cr√≠ticos
    if (report.advanced.alerts.count > 0) {
      console.log(`\nüö® ALERTAS CR√çTICOS: ${report.advanced.alerts.count}`);
      console.log(`   √öltimas 24h: ${report.advanced.alerts.analysis.last24h}`);
    }

    // Recomenda√ß√µes
    if (report.advanced.recommendations.length > 0) {
      console.log('\nüí° RECOMENDA√á√ïES:');
      report.advanced.recommendations.forEach((rec, index) => {
        const priority = rec.priority === 'HIGH' ? 'üî¥' : rec.priority === 'MEDIUM' ? 'üü°' : 'üü¢';
        console.log(`   ${index + 1}. ${priority} ${rec.message}`);
      });
    }

    return report;
  }

  /**
   * Resetar todos os dados
   */
  static reset() {
    this._slowOperations = [];
    this._alerts = [];
    PerformanceMetrics.reset();

    Logger.info('PerformanceMonitor', 'Sistema resetado completamente');
  }
}

// ================================================================================
// INTEGRA√á√ÉO COM SISTEMA EXISTENTE
// ================================================================================

/**
 * Hook no PerformanceMetrics existente para usar o sistema avan√ßado
 */
const OriginalTrackOperation = PerformanceMetrics.trackOperation;
PerformanceMetrics.trackOperation = function(operation, tableName, timeMs, cacheHit) {
  // Chamar sistema original
  OriginalTrackOperation.call(this, operation, tableName, timeMs, cacheHit);

  // Chamar sistema avan√ßado
  PerformanceMonitor.trackOperation(operation, tableName, timeMs, { cacheHit });
};

// ================================================================================
// FUN√á√ïES DE TESTE E DEMONSTRA√á√ÉO
// ================================================================================

/**
 * Fun√ß√£o para testar o sistema de monitoramento
 */
function testPerformanceMonitor() {
  console.log('üß™ TESTANDO PERFORMANCE MONITOR');
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

  try {
    // Simular algumas opera√ß√µes
    console.log('\nüìä Simulando opera√ß√µes...');

    // Opera√ß√µes r√°pidas
    PerformanceMonitor.trackOperation('QUERY', 'usuarios', 300);
    PerformanceMonitor.trackOperation('INSERT', 'atividades', 800);

    // Opera√ß√µes normais
    PerformanceMonitor.trackOperation('QUERY', 'membros', 1500);
    PerformanceMonitor.trackOperation('UPDATE', 'participacoes', 2000);

    // Opera√ß√µes lentas
    PerformanceMonitor.trackOperation('QUERY', 'atividades', 4000);
    PerformanceMonitor.trackOperation('FULL_VALIDATION', 'membros', 6000);

    // Opera√ß√µes cr√≠ticas
    PerformanceMonitor.trackOperation('QUERY', 'participacoes', 12000);
    PerformanceMonitor.trackOperation('INSERT', 'atividades', 18000);

    console.log('‚úÖ Opera√ß√µes simuladas');

    // Gerar relat√≥rio
    console.log('\nüìã Gerando relat√≥rio...');
    const report = PerformanceMonitor.logAdvancedReport();

    console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
    return { success: true, report };

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * Fun√ß√£o para benchmark do sistema atual
 */
async function runSystemBenchmark() {
  console.log('‚ö° EXECUTANDO BENCHMARK DO SISTEMA');
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

  try {
    // Reset m√©tricas
    PerformanceMonitor.reset();

    // Benchmark de queries
    console.log('\nüîç Benchmark: Queries...');
    const startQuery = new Date();
    const users = DatabaseManager.query('usuarios', {});
    const atividades = DatabaseManager.query('atividades', {});
    const membros = DatabaseManager.query('membros', {});
    const queryTime = new Date() - startQuery;

    // Benchmark de inser√ß√£o (simulada)
    console.log('\n‚ûï Benchmark: Valida√ß√µes...');
    const startValidation = new Date();
    // Simular valida√ß√µes complexas
    await ValidationEngine.validateRecord('atividades', {
      id: 'TEST-001',
      titulo: 'Benchmark Test',
      data: '2025-09-22',
      categoria_atividade_id: 'CAT-001'
    });
    const validationTime = new Date() - startValidation;

    // Gerar relat√≥rio do benchmark
    console.log('\nüìä Resultados do Benchmark:');
    console.log(`   Queries (3 tabelas): ${queryTime}ms`);
    console.log(`   Valida√ß√£o completa: ${validationTime}ms`);

    const report = PerformanceMonitor.getAdvancedReport();

    console.log('\nüèÜ BENCHMARK CONCLU√çDO!');
    return {
      success: true,
      benchmark: { queryTime, validationTime },
      report
    };

  } catch (error) {
    console.error('‚ùå Erro no benchmark:', error.message);
    return { success: false, error: error.message };
  }
}